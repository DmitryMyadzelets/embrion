// Generated by CoffeeScript 1.9.2
describe("Neuron", function() {
  var neuron;
  beforeEach(function() {
    var neuron;
    return neuron = null;
  });
  neuron = new Neuron();
  it("is a function", function() {
    return expect(typeof Neuron).toBe('function');
  });
  it("new Neuron() returns an object", function() {
    return expect(typeof neuron).toBe('object');
  });
  it("neuron.SM  - sensor matrix of type Matrix", function() {
    return expect(neuron.SM instanceof Matrix).toBe(true);
  });
  it("neuron.P0 - initial memory matrix of type Matrix", function() {
    return expect(neuron.P0 instanceof Matrix).toBe(true);
  });
  it("neuron.P - memory matrix of type Matrix", function() {
    return expect(neuron.P instanceof Matrix).toBe(true);
  });
  it("neuron.U - attention matrix of type Matrix", function() {
    return expect(neuron.U instanceof Matrix).toBe(true);
  });
  describe("Life time neuron.NS:", function() {
    neuron = new Neuron();
    it("is equal to 1 by default", function() {
      return expect(neuron.NS).toBe(1);
    });
    it("can be set by constructor e.g. Neuron({ NS : 8 })", function() {
      neuron = new Neuron({
        NS: 8
      });
      return expect(neuron.NS).toBe(8);
    });
    return it("or directly neuron.NS = 25", function() {
      neuron.NS = 25;
      return expect(neuron.NS).toBe(25);
    });
  });
  describe("Size of neuron", function() {
    describe("by default", function() {
      var cols, rows;
      rows = 2;
      cols = 3;
      neuron = new Neuron();
      it("neuron.SM has size [2, 3]", function() {
        expect(neuron.SM.rows()).toBe(rows);
        return expect(neuron.SM.cols()).toBe(cols);
      });
      it("neuron.P has size [1, 3]", function() {
        expect(neuron.P.rows()).toBe(1);
        return expect(neuron.P.cols()).toBe(cols);
      });
      it("neuron.P0 has size [1, 3]", function() {
        expect(neuron.P0.rows()).toBe(1);
        return expect(neuron.P0.cols()).toBe(cols);
      });
      return it("neuron.U has size [3, 1]", function() {
        expect(neuron.U.rows()).toBe(rows);
        return expect(neuron.U.cols()).toBe(1);
      });
    });
    return describe("if the size is provided in the config e.g. Neuron({rows : 8, cols : 5})", function() {
      var cols, config, rows;
      rows = 8;
      cols = 5;
      config = {
        rows: rows,
        cols: cols
      };
      beforeEach(function() {
        return neuron = new Neuron(config);
      });
      it("neuron.SM has size [8, 5]", function() {
        expect(neuron.SM.rows()).toBe(rows);
        return expect(neuron.SM.cols()).toBe(cols);
      });
      it("neuron.P has size [1, 5]", function() {
        expect(neuron.P.rows()).toBe(1);
        return expect(neuron.P.cols()).toBe(cols);
      });
      it("neuron.P0 has size [1, 5]", function() {
        expect(neuron.P0.rows()).toBe(1);
        return expect(neuron.P0.cols()).toBe(cols);
      });
      return it("neuron.U has size [8, 1]", function() {
        expect(neuron.U.rows()).toBe(rows);
        return expect(neuron.U.cols()).toBe(1);
      });
    });
  });
  return describe("neuron.run", function() {
    neuron = new Neuron();
    it("is a function", function() {
      return expect(typeof neuron.run === 'function').toBe(true);
    });
    it("run.done is false after the first run", function() {
      return expect(neuron.run().done).toBe(false);
    });
    it("terminates, i.e. neuron.run.done == true after few runs", function() {
      var done;
      done = false;
      while (done === false) {
        done = neuron.run().done;
      }
      return expect(done).toBe(true);
    });
    it("invokes neuron.event 0 times when U matrix is not set up", function() {
      var i;
      i = 0;
      neuron.event = function() {
        return i += 1;
      };
      while (!neuron.run().done) {
        null;
      }
      return expect(i).toBe(0);
    });
    it("invokes neuron.event 2 times when U matrix is set to 1'ns", function() {
      var i;
      neuron = new Neuron();
      i = 0;
      neuron.U.each(function() {
        return 1;
      });
      neuron.event = function() {
        return i += 1;
      };
      while (!neuron.run().done) {
        null;
      }
      return expect(i).toBe(2);
    });
    return it("invokes neuron.event 50 times when U = [2, 3], NS = 10", function() {
      var i;
      neuron = new Neuron();
      neuron.NS = 10;
      i = 0;
      neuron.U.set(0, 0, 2);
      neuron.U.set(1, 0, 3);
      neuron.event = function() {
        return i += 1;
      };
      while (!neuron.run().done) {
        null;
      }
      return expect(i).toBe(50);
    });
  });
});
